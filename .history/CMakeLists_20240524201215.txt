# # project(CMake-DFSS)

# # add_executable(DFSS
# #     "src/main.cpp"
# #     "src/DataSource.h"
# #     "src/Peer.cpp"
# #     "src/threadPool.cpp"
# #     "src/threadPool.h"
# #     "lib/imgui.h"
# #     "lib/imgui.cpp"
# #     "lib/imgui_impl_glfw.h"
# #     "lib/imgui_impl_glfw.cpp"
# #     "lib/imgui_impl_opengl3.h"
# #     "lib/imgui_impl_opengl3.cpp"
# #     # "lib/glfw3.h"
# # )

# cmake_minimum_required(VERSION 3.10)
# project(CMake-DFSS)

# set(CMAKE_CXX_STANDARD 11)

# # 设置头文件目录
# include_directories(lib/glfw/include/GLFW)
# include_directories(lib/imgui)
# include_directories(lib/src)

# # 设置库文件目录
# link_directories(lib/glfw/lib)

# # 创建可执行文件
# add_executable(DFSS
# "src/main.cpp"
# "src/Peer.cpp"
# "src/ThreadPool.cpp"
# "lib/imgui.cpp"
# "lib/imgui_demo.cpp"
# "lib/imgui_draw.cpp"
# "lib/imgui_tables.cpp"
# "lib/imgui_widgets.cpp"
# "lib/imgui_impl_glfw.cpp"
# "lib/imgui_impl_opengl3.cpp"
# )

# # 链接库文件
# target_link_libraries(DFSS glfw GL dl pthread)

# cmake_minimum_required(VERSION 3.10)
# project(CMake-DFSS)

# set(CMAKE_CXX_STANDARD 11)

# # 设置头文件目录
# include_directories(lib/glfw/include)
# include_directories(lib/imgui)

# # 假设您的源文件都在src/目录下
# file(GLOB SOURCES "src/*.cpp")

# # 创建可执行文件
# add_executable(DFSS ${SOURCES})

# # 链接库文件
# find_package("E:\\Project\\Distributed\\DistributedFileSS\\lib\\glfw\\lib\\libglfw3.a")
# find_package(OpenGL REQUIRED)
# target_link_libraries(DFSS glfw OpenGL::GL dl pthread)

# cmake_minimum_required(VERSION 3.10)
# project(CMake-DFSS)

# set(CMAKE_CXX_STANDARD 11)

# # 设置头文件目录
# include_directories(${CMAKE_SOURCE_DIR}/lib/glfw/include)
# include_directories(${CMAKE_SOURCE_DIR}/lib)

# # 设置库文件目录
# link_directories(${CMAKE_SOURCE_DIR}/lib/glfw/lib)

# # 创建可执行文件
# add_executable(DFSS
# "src/main.cpp"
# "src/Peer.cpp"
# "src/threadPool.cpp"
# "src/imgui.cpp"
# "src/imgui_demo.cpp"
# "src/imgui_draw.cpp"
# "src/imgui_tables.cpp"
# "src/imgui_widgets.cpp"
# "src/imgui_impl_glfw.cpp"
# "src/imgui_impl_opengl3.cpp"
# )

# # 链接库文件
# target_link_libraries(DFSS glfw3 GL pthread)

cmake_minimum_required(VERSION 3.10)
project(DFSS)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 添加 GLFW 包含目录
include_directories(lib/glfw/include)

# 添加 GLFW 库（这里假设是静态链接）
add_library(GLFW STATIC IMPORTED)
set_target_properties(GLFW PROPERTIES
    IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/lib/glfw/lib/libglfw3.a)

# 设置 OpenGL 库（假设系统默认能找到）
find_package(OpenGL REQUIRED)

if(OPENGL_FOUND)
    include_directories(${OPENGL_INCLUDE_DIR})
endif()

# 添加源文件
set(SOURCE_FILES
    src/main.cpp
    src/Peer.cpp
    src/threadPool.cpp
    src/imgui.cpp
    src/imgui_demo.cpp
    src/imgui_draw.cpp
    src/imgui_impl_glfw.cpp
    src/imgui_impl_opengl3.cpp
    src/imgui_tables.cpp
    src/imgui_widgets.cpp
)

# 添加可执行文件
add_executable(DistributedFileSS ${SOURCE_FILES})

# 链接库
target_link_libraries(DistributedFileSS GLFW ${OPENGL_LIBRARIES})

# 如果 GLFW 需要额外的库（如 GL 和 pthread），请在这里添加
# target_link_libraries(DistributedFileSS glfw GL pthread)

# 指定输出目录
set_property(TARGET DistributedFileSS PROPERTY RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
# 生成编译命令文件，便于 IDE 支持
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)